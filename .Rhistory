colData = target.modif,
design = ~ Condition + Time_point + Condition:Time_point)
normalizationFactors(dds.global) <- selected.fusion
obj.dds$dds.global <- dds.global
return(obj.dds)
}
ecodif_estidispe <- function(obj.dds){
stopifnot(class(obj.dds)=="ObjDDS")
dds.global <- obj.dds$dds.global
dds.global <- estimateDispersions(dds.global)
obj.dds$dds.global <- dds.global
return(obj.dds)
}
attach(object)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
library(PackEcodif)
system.info()
Sys.info()
remove.package("PackEcodiff")
remove.packages("PackEcodiff")
install.packages(locfit)
install.packages("locfit",repos = "https://cloud.r-project.org")
install.packages("locfit", dependencies = TRUE)
install.packages(locfit)
install.packages("locfit")
Sys.info()
sessionInfo()
install.packages("installr")
sessionInfo()
sessionInfo()
install.packages(µ"locfit")
install.packages("locfit")
install.packages("roxygen2")
setwd("C:/Users/pc/Desktop/PackEcodif")
library(PackEcodif)
library(PackEcodif)
install.package('devtools')
install.packages("devtools")
install.package('roxygen2')
install.packages("roxygen2")
main_ecodif <- function(table.data, file.species, design){
obj_ecodif <- ecodif_loading(table.data, file.species, design)
obj_ecodif <- ecodif_sizefactor(obj_ecodif)
obj_ecodif <- ecodif_estidispe(obj_ecodif)
obj_ecodif <- ecodif_wald(obj_ecodif)
return(obj_ecodif)
}
ecodif_estidispe <- function(obj.dds){
stopifnot(class(obj.dds)=="ObjDDS")
dds.global <- obj.dds$dds.global
dds.global <- estimateDispersions(dds.global)
obj.dds$dds.global <- dds.global
return(obj.dds)
}
#' A dataset containing a table with raw counts and the corresponding gene IDs,
#' a table with the gene IDs corresponding to the species
#' a table of the experience's design, with all the parameters
#'
#' @format A data frame with 53940 rows and 10 variables:
#' \describe{
#'   \item{table.data}{table with raw counts and the corresponding gene IDs}
#'   \item{file.species}{a table with the gene IDs corresponding to the species}
#'   \item{design}{a table of the experience's design, with all the parameters}
#' }
"datalist"
ecodif_graph <- function(object){
stopifnot(class(object)=="ObjDDS" || class(object)=="DESeqResu")
##stopifnot(xor(class(object)=="ObjDDS",class(object)=="DESeqResu"))
## Association of a color to each Sample depending on the Condition
attach(object)
classes <- unique(target.design$Label)
classes.colors <- rainbow(n=length(classes))
names(classes.colors) <- classes
## Add a color column to the target.design table
## The color depends of the Label
target.design$color <- classes.colors[target.design$Label]
nb.species_short <- c(1:length(species_short))
names(nb.species_short) <- species_short
table.data$Spe <- nb.species_short[file.species$Species]
## Boxplot
print(.f_boxplot(object))
## boxplot normalized data
print(.f_boxplotnorm(object))
## Dispersion plot
## plots the per-gene dispersion estimates together with the fitted mean-dispersion relationship
.f_dispe(object)
#graph.two <- plotDispEsts(dds.global, main="Species normalisation-Ecosytem dispersion")
# ## MA plot
.f_maplot(object)
# ## we check if f_wald was loaded
#
if (class(object)=="DESeqResu"){
#
dds.resu <- object$resu
#
#   ## Signification plot
print(.f_signiplot(dds.resu))
#
#   ## Volcano plot
print(.f_volcano(dds.resu))
#
}
# if (class(object)=="ObjDDS"){
#   message("You have to run the function f_wald to obtain these graphics")
# }
detach(object)
}
ecodif_loading <- function(table.data, file.species, design){
##-------------------Beginning of the tests------------
stopifnot(is.character(table.data[,1])) # stop the program if the data is not annotated
stopifnot(sum(table.data[,1]%in%file.species[,1])>2) # stop the program if the data does not enough correspond to the target
species_short <- unique(file.species[,2]) # creation of the short list of species
## Rename the columns in the user file
colnames(file.species) <- c("Geneid","Species")
colnames(table.data)[1]<- "Geneid"
raw.counts <- table.data[,-1] # remove sample names
rownames(raw.counts) <- table.data$Geneid
nblines <- nrow(raw.counts)
## Check if there are enough samples
if (nblines < 1)
{
stop("Not enough genes")
} ## 1 à remplacer
## Selection of the design
target.modif <- design %>% column_to_rownames(colnames(design)[1]) # The column samples becomes row names
target.modif <- target.modif %>% mutate(across(where(is.character),as.factor)) # transform the data in factors
## Check that sample IDs are corresponding between sample descriptions (rows) and count table (columns).
differing.IDs <- colnames(raw.counts) %in% rownames(target.modif)
stopifnot(sum(differing.IDs) > 4)
raw.counts = raw.counts[,differing.IDs]
differing.IDs.table <- colnames(table.data) %in% rownames(target.modif)
table.data = table.data[,c(1,which(differing.IDs.table))]
## Check in the other way
differing.IDs <- rownames(target.modif) %in% colnames(raw.counts)
if (any(!differing.IDs))
{
stop("The sample IDs differ between count table (column names) and sample descriptions (row names).")
}
##-------------------End of the tests------------
## Creation of the table data
table.data = table.data %>% inner_join(file.species)
## Function for filtering the raw counts
filtered.counts <- .f_filtering(raw.counts,table.data) ## internal function
print(nrow(filtered.counts))
file.species <- filtered.counts[,c(1,ncol(filtered.counts))]
print(nrow(file.species))
## Initialization of the DDS list
All.dds <- list()
All.sizeFactor <- list()
for(i in unique(filtered.counts$Species))
{
##select lines of one species
filtered.counts.spe <- dplyr::filter(filtered.counts,Species==i)
genenames <- filtered.counts.spe$Geneid
## We have to convert in dataframe
filtered.counts.spe <- as.data.frame(filtered.counts.spe[,-c(1,ncol(filtered.counts.spe))])
rownames(filtered.counts.spe)<- genenames
CT <- as.matrix(filtered.counts.spe)
CT[which(CT==0)] <- NA
geomean <- apply(CT,1,geometric.mean,na.rm=TRUE)
#print(geomean)
filtered.counts.spe[is.na(filtered.counts.spe)] = 0
#filtered.counts.spe[(filtered.counts.spe==0)] <- 1
ncol(filtered.counts.spe)
nrow(target.modif)
ddsTemp <- DESeqDataSetFromMatrix(
countData = filtered.counts.spe,
colData = target.modif,
design = ~ Condition + Time_point + Condition:Time_point)
All.dds[[i]] <- ddsTemp
ddsTemp <- estimateSizeFactors(ddsTemp,geoMeans=geomean)
TableSizeFactor <- sizeFactors(ddsTemp)
TableSizeFactor <- as.data.frame(TableSizeFactor)
All.sizeFactor[[i]] <- TableSizeFactor
}
obj.dds = list(All.sizeFactor=All.sizeFactor, All.dds=All.dds,table.data=filtered.counts, file.species=file.species, design=design, target.modif=target.modif, species_short=species_short, raw.counts=raw.counts)
class(obj.dds) = "ObjDDS"
return(obj.dds)
}
ecodif_sizefactor <- function(obj.dds){
stopifnot(class(obj.dds)=="ObjDDS")
matrixFactors <- NULL
target.modif <- obj.dds$target.modif
All.sizeFactor <- obj.dds$All.sizeFactor
table.data <- obj.dds$table.data
matrixFactors = t(do.call(cbind,All.sizeFactor))
names.col <- colnames(matrixFactors)
rownames(matrixFactors) <- names(All.sizeFactor)
matrixFactors <- matrixFactors %>% as.data.frame %>% rownames_to_column("Spe")
table.data.modif <- table.data %>% as.data.frame %>% dplyr::select(-Geneid)
#table.data.modif <- table.data.modif %>% rename(Species="Spe")
colnames(table.data.modif)[ncol(table.data.modif)]<- "Spe"
nrow(table.data.modif)
p <- ncol(table.data.modif)
## function for the fusion of the two tables
list.results <- .f_fusion(matrixFactors, table.data.modif)
expr.table.final <- list.results$expr.table.final
print(nrow(expr.table.final))
selected.fusion <- list.results$selected.fusion
print(nrow(selected.fusion))
ncol(expr.table.final)
nrow(target.modif)
rownames(expr.table.final) <- table.data$Geneid
## creation of the global dds
dds.global <- DESeqDataSetFromMatrix(
countData = expr.table.final,
colData = target.modif,
design = ~ Condition + Time_point + Condition:Time_point)
normalizationFactors(dds.global) <- selected.fusion
obj.dds$dds.global <- dds.global
return(obj.dds)
}
ecodif_wald <- function(obj.dds, ...){
stopifnot(class(obj.dds)=="ObjDDS")
dds.global <- obj.dds$dds.global
dds.global <- nbinomWaldTest(dds.global)
obj.dds$dds.global <- dds.global
resu <- DESeq2::results(dds.global, ...)
list.return <- list(obj.dds=obj.dds, resu=resu)
class(list.return) = "DESeqResu"
return(list.return)
}
.f_filtering <-function(raw.counts,table.data){
## Raw counts filter
## Zero-variance filter
gene.var <- apply(raw.counts, 1, var,na.rm=TRUE)
## Define a Boolean vector (TRUE/FALSE)
## indicating whether each gene has a null variance.
zero.var.genes <- gene.var == 0
## Discard genes having zeros in at least 90% of samples
## message("Applying threshold on the percent of non-zero counts per gene: ", parameters$gene.filter.percent.zeros, "%")
## A Boolean table indicating whether each count is null (TRUE) or not (FALSE)
zero.counts <- raw.counts == 0
max.per.gene <- apply(raw.counts, 1, max,na.rm=TRUE)
## Count number of zero values per gene (=row of the expression table)
percent.zeros <- 100*apply(zero.counts, 1, sum,na.rm=T) / ncol(zero.counts)
discarded.genes <- data.frame(
zero.var = zero.var.genes,
too.many.zeros = (percent.zeros > parameters$gene.filter.percent.zeros),
too.small.counts = max.per.gene < parameters$gene.filter.min.count)
## Genes passing the filters are those for which
## all the discarding criteria are FALSE,
## i.e. the sum of the row is 0
filtered.genes <- apply(discarded.genes, 1, FUN=function(x){!any(x)})
filtered.genes[is.na(filtered.genes)] <- FALSE
## Select a matrix with the filtered genes,
## i.e. those not discarded by any criterion
filtered.counts <- table.data[filtered.genes, ]
test <- table(filtered.counts$Species) > 1 ## A modifier
if (sum(test)>=2){
filtered.counts[filtered.counts$Species %in% names(test)[test],]
} else stop("We need at least 2 species with enough genes")
return(filtered.counts)
}
.f_fusion <- function(matrixFactors, table.data.modif){
## innerjoin merge the two tables
fusion <- dplyr::inner_join(matrixFactors, table.data.modif, by="Spe")
## Number of discarded columns
nb <- ncol(matrixFactors)
selected.fusion <- fusion[,c(2:nb)]
## change col names
colnames(selected.fusion) <- colnames(matrixFactors)[-1]
## transform the table in matrix
selected.fusion <- as.matrix(selected.fusion)
## change NA values in 0
table.data.modif[is.na(table.data.modif)] <- 0
table.data.modif$Spe = NULL
# expr.table.final <- expr.table.modif[,-p]
listresults <- list(expr.table.final=table.data.modif, selected.fusion=selected.fusion)
return(listresults)
}
.f_boxplot <- function(object){
transi <- object$obj.dds
raw.counts <- as.data.frame(transi$raw.counts)
counts.modif <- reshape2::melt(raw.counts, id.vars = NULL)
## Merge target with counts.modif
colnames(counts.modif)[1] <- "Sample"
merge.counts <- dplyr::inner_join(counts.modif, target.design, by="Sample")
lab = unique(target.design$Label)
## BOXPLOT raw datas
plot <- ggplot(merge.counts, aes(x= Sample, y= value, fill=Label )) + ggtitle("Boxplot of Raw Counts") + xlab("Species") + ylab("RawCounts") + geom_boxplot() + scale_y_log10() + scale_fill_igv(name = "Conditions")
return(plot)
}
.f_boxplotnorm <- function(object){
normalized <- DESeq2::counts(object$obj.dds$dds.global, normalized = TRUE)
normalized <- reshape2::melt(normalized)
colnames(normalized)[2] <- "Sample"
merge.normalized <- dplyr::inner_join(normalized, target.design, by="Sample")
lab = unique(target.design$Label) ## Déjà fait plus haut à retirer peut être
plot <- ggplot(merge.normalized, aes(x= Sample, y= value, fill=Label )) + ggtitle("Boxplot of Normalized Counts") +  xlab("Species") + ylab("Normalized Counts") + geom_boxplot() + scale_y_log10() + scale_fill_igv(name = "Conditions", labels = lab)
return(plot)
}
.f_dispe <- function(object){
graph.dispe <- plotDispEsts(object$obj.dds$dds.global, main="Species normalisation dispersion", genecol = "black", fitcol = "red", finalcol ="dodgerblue", legend = TRUE)
}
.f_maplot <- function(object){
## Note: we explicitly indicate the package name to avoid confusion with limma::plotMA()
DESeq2::plotMA(object = object$obj.dds$dds.global)
}
.f_signiplot <- function(dds.resu){
vecteur <- dds.resu$pvalue > 0.05
vecteur[is.na(vecteur)] <- FALSE
dds.resu$Significativity <- vecteur
dds.resu <- as.data.frame(dds.resu)
plot <- ggplot(dds.resu, aes(x= baseMean, y= log2FoldChange)) + ggtitle("Significativity Plot") + xlab("") + ylab("") + geom_point(aes(color=Significativity)) + geom_hline(yintercept=0,linetype = "dashed",color="red") + scale_color_uchicago("dark",alpha = 0.9) + theme_minimal()
return(plot)
}
.f_volcano <- function(dds.resu){
## Volcano plot
dds.resu <- as.data.frame(dds.resu)
plot <- ggplot(data=dds.resu, aes(x=log2FoldChange, y=-log10(pvalue))) + ggtitle("Volcano Plot") + xlab("Log2 Fold Change") + ylab("-log10(pvalue)") + geom_point() + theme_minimal() + geom_hline(yintercept=-log10(0.05), col="red")
return(plot)
}
setwd("C:/Users/pc/Desktop/PackEcodif/data")
load("datalist.rda")
expr.table = datalist[[1]]
annotation.species = datalist[[2]]
sample.classes = datalist[[3]]
library(knitr)
library(DESeq2)#
library(qpdf)
library("dplyr")#
library("ggplot2")#
library("hexbin")
library(gdata)#
library(data.table)#
library(VennDiagram)
library(DESeq2) #
library(edgeR)#
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
setwd("C:/Users/Admin/Desktop/Package/data")
load("datalist.rda")
expr.table = datalist[[1]]
annotation.species = datalist[[2]]
sample.classes = datalist[[3]]
library(knitr)
library(DESeq2)#
library(qpdf)
library("dplyr")#
library("ggplot2")#
library("hexbin")
library(gdata)#
library(data.table)#
library(VennDiagram)
library(DESeq2) #
library(edgeR)#
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library(knitr)
library(DESeq2)#
library(qpdf)
library("dplyr")#
library("ggplot2")#
library("hexbin")
library(gdata)#
library(data.table)#
library(VennDiagram)
library(DESeq2) #
library(edgeR)#
library(readr)
library(tidyverse)#
library(magrittr)
library(psych)#
library(gdata)
library(psych)#
library(gdata)
library(PackEcodif)
library(textshape)
library(textshape)
library(dplyr)#
library(radiant.data)
library(readr)
library(tidyverse)#
library(magrittr)
library(psych)#
library(gdata)
library(PackEcodif)
library(textshape)
library(dplyr)#
library(radiant.data)
library(reshape2)#
library(ggsci)#
library(reshape2)#
library(ggsci)#
library(contrast)#
library(GSEABase)#
library(limma)
library(igraph)
library(NetPathMiner)
library(ggsci,quietly = TRUE)
library(tibble)
parameters <- list( counts = expr.table , species = annotation.species , sample.descr = sample.classes , functional.db = "MetawoGcDh.gmt",  alpha = 0.05, epsilon = 0.1, gene.filter.percent.zeros = 90, gene.filter.min.count = 10,control.condition = "Complete",control.design = "C",control.time = "T07", control.group ="Complete.T07")
parameters
table.data <- expr.table
file.species <- annotation.species
design <- sample.classes
DESeqResu <- main_ecodif(table.data,annotation.species,sample.classes)
# ça run !
obj <- DESeqResu$obj.dds
######### appel de la fonction graph :
target.design <- DESeqResu[["obj.dds"]][["design"]]  ; target.design
species_short <- DESeqResu[["obj.dds"]][["species_short"]] ;species_short
table.data <- DESeqResu[["obj.dds"]][["table.data"]] ; table.data
file.species <- DESeqResu[["obj.dds"]][["file.species"]] ;file.species
graph <- ecodif_graph(DESeqResu)
#ça run !
nb.species_short <- c(1:length(obj$species_short)) ; nb.species_short
species_short
a <- ecodif_loading(table.data , file.species , design)
class(a)
######### test des fonctions internel :
raw.counts <- DESeqResu[["obj.dds"]][["dds.global"]]@assays@data@listData[["counts"]]
rownames(raw.counts)<- DESeqResu[["obj.dds"]][["table.data"]][["Geneid"]]
b <- .f_filtering(raw.counts,expr.table)
######### appel de la fonction wald
c <- ecodif_wald(obj); c
#' @importFrom grDevices rainbow
#' @importFrom psych geometric.mean
#' @example
#' data(datalist)
#' obj <- ecodif_loading(expr.table, annotation.species, design)
#' obj <- ecodif_sizefactor(obj)
#' obj <- ecodif_estidispe(obj)
#' obj <- ecodif_wald(obj)
#' graph <- ecodif_graph(obj)
#' @export
utils::globalVariables(c("species_short" , "file.species" , "objet" , "annotation.species"))
ecodif_graph <- function(object){
stopifnot(class(object)=="ObjDDS" || class(object)=="DESeqResu")
##stopifnot(xor(class(object)=="ObjDDS",class(object)=="DESeqResu"))
## Association of a color to each Sample depending on the Condition
#attach(object)
classes <- unique(object$target.design$label)
#classes <- unique(target.design$Label)
classes.colors <- rainbow(n=length(classes))
names(classes.colors) <- classes
## Add a color column to the target.design table
## The color depends of the Label
object$target.design$color <- classes.colors[object$target.design$Label]
#target.design$color <- classes.colors[target.design$Label]
nb.species_short <- c(1:length(object$species_short))
names(nb.species_short) <- species_short
#table.data$Spe <- nb.species_short[annotation.species$Species]
object$table.data$Spe <- nb.species_short[annotation.species$Species]
## Boxplot
print(.f_boxplot(object))
## boxplot normalized data
print(.f_boxplotnorm(object))
## Dispersion plot
## plots the per-gene dispersion estimates together with the fitted mean-dispersion relationship
.f_dispe(object)
#graph.two <- plotDispEsts(dds.global, main="Species normalisation-Ecosytem dispersion")
## MA plot
#.f_maplot(object)
## we check if f_wald was loaded
#if (class(object)=="DESeqResu"){
# dds.resu <- object$resu
## Signification plot
#print(.f_signiplot(dds.resu))
## Volcano plot
#print(.f_volcano(dds.resu))
#}
#if (class(object)=="ObjDDS"){
#  message("You have to run the function f_wald to obtain these graphics")
# }
detach(object)
}
######### test des fonctions internel :
raw.counts <- DESeqResu[["obj.dds"]][["dds.global"]]@assays@data@listData[["counts"]]
rownames(raw.counts)<- DESeqResu[["obj.dds"]][["table.data"]][["Geneid"]]
b <- .f_filtering(raw.counts,expr.table)
######### appel de la fonction wald
c <- ecodif_wald(obj); c
b <- ecodif_estidispe(obj) ; b
#dds  <- DESeqResu$obj.dds$dds.global ; dds
dds <- DESeqResu[["obj.dds"]] ; dds
#c'est la même chose , même sortiz
size_FF <- DESeqResu$obj.dds$All.sizeFactor ; size_FF
#appel de la fonction size_factor
size_fff <- ecodif_sizefactor(dds)
#Error in ecodif_sizefactor(dds) :
#class(obj.dds) == "ObjDDS" n'est pas TRUE
class(dds)
#data transformtion
#varaince stabilizing data
#ça sert à quoi ? je comprends pas
ddss <- DESeqResu$obj.dds$dds.global
vsd <- vst(ddss, blind=FALSE) ; vsd
